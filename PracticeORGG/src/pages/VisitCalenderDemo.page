<apex:page cache="false" sidebar="false"  >


<head>
<title>Title</title>



<link href='http://page-test.co.uk/cal/fullcalendar.css' rel='stylesheet' />

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>

<script src='jquery-ui-1.10.2.custom.min.js'></script>

<script src='http://page-test.co.uk/cal/fullcalendar.js'></script>

<script>

/*!
 * jQuery UI Touch Punch 0.2.2
 *
 * Copyright 2011, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
(function ($) {

  // Detect touch support
  $.support.touch = 'ontouchend' in document;

  // Ignore browsers without touch support
  if (!$.support.touch) {
    return;
  }

  var mouseProto = $.ui.mouse.prototype,
      _mouseInit = mouseProto._mouseInit,
      touchHandled;

  /**
   * Simulate a mouse event based on a corresponding touch event
   * @param {Object} event A touch event
   * @param {String} simulatedType The corresponding mouse event
   */
  function simulateMouseEvent (event, simulatedType) {

    // Ignore multi-touch events
    if (event.originalEvent.touches.length > 1) {
      return;
    }

    event.preventDefault();

    var touch = event.originalEvent.changedTouches[0],
        simulatedEvent = document.createEvent('MouseEvents');
    
    // Initialize the simulated mouse event using the touch event's coordinates
    simulatedEvent.initMouseEvent(
      simulatedType,    // type
      true,             // bubbles                    
      true,             // cancelable                 
      window,           // view                       
      1,                // detail                     
      touch.screenX,    // screenX                    
      touch.screenY,    // screenY                    
      touch.clientX,    // clientX                    
      touch.clientY,    // clientY                    
      false,            // ctrlKey                    
      false,            // altKey                     
      false,            // shiftKey                   
      false,            // metaKey                    
      0,                // button                     
      null              // relatedTarget              
    );

    // Dispatch the simulated event to the target element
    event.target.dispatchEvent(simulatedEvent);
  }

  /**
   * Handle the jQuery UI widget's touchstart events
   * @param {Object} event The widget element's touchstart event
   */
  mouseProto._touchStart = function (event) {

    var self = this;

    // Ignore the event if another widget is already being handled
    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
      return;
    }

    // Set the flag to prevent other widgets from inheriting the touch event
    touchHandled = true;

    // Track movement to determine if interaction was a click
    self._touchMoved = false;

    // Simulate the mouseover event
    simulateMouseEvent(event, 'mouseover');

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');

    // Simulate the mousedown event
    simulateMouseEvent(event, 'mousedown');
  };

  /**
   * Handle the jQuery UI widget's touchmove events
   * @param {Object} event The document's touchmove event
   */
  mouseProto._touchMove = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Interaction was not a click
    this._touchMoved = true;

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');
  };

  /**
   * Handle the jQuery UI widget's touchend events
   * @param {Object} event The document's touchend event
   */
  mouseProto._touchEnd = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Simulate the mouseup event
    simulateMouseEvent(event, 'mouseup');

    // Simulate the mouseout event
    simulateMouseEvent(event, 'mouseout');

    // If the touch interaction did not move, it should trigger a click
    if (!this._touchMoved) {

      // Simulate the click event
      simulateMouseEvent(event, 'click');
    }

    // Unset the flag to allow other widgets to inherit the touch event
    touchHandled = false;
  };

  /**
   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
   * This method extends the widget with bound touch event handlers that
   * translate touch events to mouse events and pass them to the widget's
   * original mouse event handling methods.
   */
  mouseProto._mouseInit = function () {
    
    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element
      .bind('touchstart', $.proxy(self, '_touchStart'))
      .bind('touchmove', $.proxy(self, '_touchMove'))
      .bind('touchend', $.proxy(self, '_touchEnd'));

    // Call the original $.ui.mouse init method
    _mouseInit.call(self);
  };

})(jQuery);





/**
 * @preserve
 * jQuery FullCalendar iPad plugin v1.0
 * http://coconutcalendar.com/
 *
 * Uses the fullCalendar script by Adam Shaw (http://arshaw.com/fullcalendar/)
 * to provide drag/drop support on the iPad.
 *
 * Copyright (c) 2011 Jordan Boesch
 * Dual licensed under the MIT and GPL licenses.
 *
 * Date: Wed Oct 19, 2011
 * @requires jQuery touch punch: https://github.com/furf/jquery-ui-touch-punch
 
 */

(function($){

    // Detect touch devices
    window.isTouchDevice = isTouchDevice = (function(){
        //var ua = navigator.userAgent;
        //var isTouchDevice = (
        //    ua.match(/iPad/i) ||
        //    ua.match(/iPhone/i) ||
        //    ua.match(/iPod/i)
        //);

        return 'ontouchend' in document;//isTouchDevice;
    })();

    // Don't do anything if we aren't on a touch device
    if(!isTouchDevice)
    {
        return;
    }

    // Fix and over-ride a bug in jquery ui touch punch
    var _old_mouseDown = $.ui.mouse.prototype._mouseDown;
    $.ui.mouse.prototype._mouseDown = function(event){
        this._mouseDownEvent = event;
        return _old_mouseDown.call(this, event);
    }

    // A handy function to setup our draggables
    $.fn.fullCalendarSetupTouchDraggable = function()
    {
        return this.each(function(){
            $(this).find('.fc-event-draggable').each(function(){
                var e = jQuery.Event("mouseover", {
                    target: this.firstChild,
                    _dummyCalledOnStartup: true
                });
                $(this).trigger(e);
            });
        });
    }

    // Keep a reference to the old one
    var _old_fc = $.fn.fullCalendar;

    $.fn.fullCalendar = function(options)
    {

        var $el = this;

        if(typeof(options) == 'object')
        {
            // If it's not an array, they're loading content in via
            // ajax/json. Hijack the loading callback.
            if(!$.isArray(options.loading))
            {
                var _old_loading = options.loading || function(){};
                options.loading = function(isLoading)
                {
                    if(!isLoading)
                    {
                        // Since the draggable events are lazy(bind)loaded, we need to
                        // trigger the mouseover event so they're all ready for us to
                        // drag/drop on the iPad.
                        $el.fullCalendarSetupTouchDraggable();
                    }
                    _old_loading.apply(this, arguments);
                }
            }
            
            // Hijack the eventMouseover/eventClick methods
            if(options.eventClick || options.eventMouseover)
            {

                var _old_eventClick = options.eventClick || function(){};
                var _old_eventMouseover = options.eventMouseover || function(){};

                // Here, we just combine the click and mouseover events that MAY have been
                // bound. That way, we aren't just ignoring the eventClick event entirely.
                options.eventMouseover = function(event, jsEvent, view)
                {
                    if(jsEvent._dummyCalledOnStartup)
                    {
                        return;
                    }
                    _old_eventClick.apply(this, arguments);
                    _old_eventMouseover.apply(this, arguments);
                }

                // Remove it because it's no good on a touch device, using mouseover
                delete options.eventClick;
            }

            // We need to re-bind our draggables if they switch views
            var _old_viewDisplay = options.viewDisplay || function(){};

            options.viewDisplay = function()
            {
                $el.fullCalendarSetupTouchDraggable();
                _old_viewDisplay.apply(this, arguments);
            }

            var fc = _old_fc.call($el, options);

            // If they loaded in static events, call our setup draggables
            // function. Then return the fullCalendar instance.
            if($.isArray(options.events))
            {
                $el.fullCalendarSetupTouchDraggable();
            }

            return fc;

        }

        return _old_fc.apply(this, arguments);

    }
})(jQuery);


$(document).ready(function() {

    var date = new Date();
    var d = date.getDate();
    var m = date.getMonth();
    var y = date.getFullYear();
    
    $('.calendar').fullCalendar({
        header: {
            left: 'prev,next today',
            right: 'month,agendaWeek',
        },
        allDaySlot: true,
        editable: true,
        weekMode: 'variable',
        minTime: 10,
        maxTime: 16,
        height: 800,
        slotMinutes: 15,
        columnFormat: {
            agendaWeek: 'ddd dd/MM',
            agendaDay: 'dddd dd/MM'
        },
        titleFormat: {
            agendaWeek: "MMM dd[ yyyy]{ '&#8212;'[ MMM] dd, yyyy}",
            agendaDay: 'dddd, MMM dd, yyyy'
        },
        events: [
            {
                title: 'Event 1',
                start: new Date(y, m, d)
            },
            {
                title: 'Event 2',
                start: new Date(y, m, d-5),
                end: new Date(y, m, d-2)
            }
        ]
        
        
    });

    
});
    
</script> 
<style>

    .calendar {
        margin: 0 auto;
        text-align: center;
        font-size: 14px;
    }

</style>
</head>

<div> 

<div class='calendar'></div>

</div>




</apex:page>